{"meta":{"title":"zhaoxin-wen","subtitle":"技术改变世界","description":"人以为上树必须有梯子，他们忘了苹果并不是爬上去的","author":"zhaoxin-wen","url":"https://zhaoxin-wen.github.io","root":"/"},"pages":[{"title":"about","date":"2022-08-23T05:37:07.000Z","updated":"2022-08-23T05:41:50.108Z","comments":false,"path":"about/index.html","permalink":"https://zhaoxin-wen.github.io/about/index.html","excerpt":"","text":"小巷 又弯又长 没有门 没有窗 我拿把旧钥匙 敲着厚厚的墙 《小巷》—-顾城"},{"title":"links","date":"2022-08-21T09:40:40.000Z","updated":"2022-08-21T10:07:31.365Z","comments":false,"path":"links/index.html","permalink":"https://zhaoxin-wen.github.io/links/index.html","excerpt":"","text":""},{"title":"guestbook","date":"2022-08-17T09:51:42.000Z","updated":"2022-08-17T09:52:51.031Z","comments":true,"path":"guestbook/index.html","permalink":"https://zhaoxin-wen.github.io/guestbook/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-08-17T08:27:53.000Z","updated":"2022-08-17T08:28:47.487Z","comments":true,"path":"categories/index.html","permalink":"https://zhaoxin-wen.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-08-17T08:29:15.000Z","updated":"2022-08-17T08:29:37.355Z","comments":true,"path":"tags/index.html","permalink":"https://zhaoxin-wen.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"java反射","slug":"java反射","date":"2023-04-07T08:21:09.000Z","updated":"2023-04-07T08:27:53.418Z","comments":true,"path":"2023/04/07/java反射/","link":"","permalink":"https://zhaoxin-wen.github.io/2023/04/07/java%E5%8F%8D%E5%B0%84/","excerpt":"根据对象名获取对象的类 根据对象的方法名获取方法 根据第一步得到的类获得对应的构造器 根据第三步获得的构造器构造对象 根据第二步得到的方法操作第4步的对象","text":"根据对象名获取对象的类 根据对象的方法名获取方法 根据第一步得到的类获得对应的构造器 根据第三步获得的构造器构造对象 根据第二步得到的方法操作第4步的对象 12345678910111213141516171819202122232425262728293031323334353637383940package com;import java.lang.reflect.Constructor;import java.lang.reflect.Method;/** * @author wzw * @date 2022/4/12 14:47 */public class Apple &#123; private int price; public int getPrice() &#123; return price; &#125; public void setPrice(int price) &#123; this.price = price; &#125; public static void main(String[] args) throws Exception&#123; //正常的调用 Apple apple = new Apple(); apple.setPrice(5); System.out.println(&quot;Apple Price:&quot; + apple.getPrice()); //使用反射调用 Class clz = Class.forName(&quot;com.Apple&quot;); Method setPriceMethod = clz.getMethod(&quot;setPrice&quot;, int.class); Constructor appleConstructor = clz.getConstructor(); Object appleObj = appleConstructor.newInstance(); setPriceMethod.invoke(appleObj, 14); Method getPriceMethod = clz.getMethod(&quot;getPrice&quot;); System.out.println(&quot;Apple Price:&quot; + getPriceMethod.invoke(appleObj)); &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"https://zhaoxin-wen.github.io/categories/java/"}],"tags":[{"name":"反射","slug":"反射","permalink":"https://zhaoxin-wen.github.io/tags/%E5%8F%8D%E5%B0%84/"}]},{"title":"ajax笔记","slug":"ajax笔记","date":"2023-02-15T14:49:35.000Z","updated":"2023-03-06T16:13:28.769Z","comments":true,"path":"2023/02/15/ajax笔记/","link":"","permalink":"https://zhaoxin-wen.github.io/2023/02/15/ajax%E7%AC%94%E8%AE%B0/","excerpt":"express框架express的基本使用1234567891011121314151617// 1. 引入expressconst express = require(&#x27;express&#x27;);// 2.创建应用对象const app = express();// 3.创建路由规则// request是对请求报文的封装// response是对响应报文的封装app.get(&#x27;/&#x27;, (request, response) =&gt; &#123; response.send(&#x27;HELLO EXPRESS&#x27;);&#125;);// 4.监听端口启动服务app.listen(8080, () =&gt; &#123; console.log(&quot;服务已经启动，8080端口监听中...&quot;);&#125;)","text":"express框架express的基本使用1234567891011121314151617// 1. 引入expressconst express = require(&#x27;express&#x27;);// 2.创建应用对象const app = express();// 3.创建路由规则// request是对请求报文的封装// response是对响应报文的封装app.get(&#x27;/&#x27;, (request, response) =&gt; &#123; response.send(&#x27;HELLO EXPRESS&#x27;);&#125;);// 4.监听端口启动服务app.listen(8080, () =&gt; &#123; console.log(&quot;服务已经启动，8080端口监听中...&quot;);&#125;) server.js 文件 服务端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127// 1. 引入expressconst express = require(&#x27;express&#x27;);// 2.创建应用对象const app = express();// 3.创建路由规则// request是对请求报文的封装// response是对响应报文的封装app.get(&#x27;/server&#x27;, (request, response) =&gt; &#123; //设置响应头 response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;); //设置响应体 response.send(&#x27;HELLO AJAX -2&#x27;);&#125;);app.all(&#x27;/server&#x27;, (request, response) =&gt; &#123; //设置响应头 response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;); response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;); //设置响应体 response.send(&#x27;HELLO AJAX ALL&#x27;);&#125;);app.all(&#x27;/json-server&#x27;, (request, response) =&gt; &#123; //设置响应头 response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;); response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;); //响应一个数据 const data = &#123; name: &#x27;zhangsan&#x27; &#125; let str = JSON.stringify(data); //设置响应体 response.send(str); // response.send(&#x27;HELLO AJAX JSON&#x27;);&#125;);//针对IE缓存app.get(&#x27;/ie&#x27;, (request, response) =&gt; &#123; //设置响应头 response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;); //设置响应体 response.send(&#x27;HELLO IE&#x27;);&#125;);// 延迟返回app.all(&#x27;/delay&#x27;, (request, response) =&gt; &#123; //设置响应头 response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;); response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;); setTimeout(() =&gt; &#123; //设置响应体 response.send(&#x27;HELLO IE&#x27;); &#125;, 1000);&#125;);// jQuery 服务app.all(&#x27;/jquery-server&#x27;, (request, response) =&gt; &#123; //设置响应头 response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;); response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;); //设置响应体 // response.send(&#x27;HELLO jquery AJAX&#x27;); const data = &#123; name: &#x27;尚硅谷&#x27; &#125;; response.send(JSON.stringify(data));&#125;);// axios 服务app.all(&#x27;/axios-server&#x27;, (request, response) =&gt; &#123; //设置响应头 response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;); response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;); //设置响应体 // response.send(&#x27;HELLO jquery AJAX&#x27;); const data = &#123; name: &#x27;尚硅谷&#x27; &#125;; response.send(JSON.stringify(data));&#125;);// fetch 服务app.all(&#x27;/fetch-server&#x27;, (request, response) =&gt; &#123; //设置响应头 response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;); response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;); //设置响应体 // response.send(&#x27;HELLO jquery AJAX&#x27;); const data = &#123; name: &#x27;尚硅谷&#x27; &#125;; response.send(JSON.stringify(data));&#125;);//jsonp服务app.all(&#x27;/jsonp-server&#x27;, (request, response) =&gt; &#123; const data = &#123; name: &#x27;尚硅谷&#x27; &#125;; //将数据转化为字符串 let str = JSON.stringify(data); response.end(`handle($&#123;str&#125;)`) // response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;); &#125;) //用户名检测是否存在app.all(&#x27;/check-username&#x27;, (request, response) =&gt; &#123; const data = &#123; exist: 1, msg: &#x27;用户名已经存在&#x27; &#125;; //将数据转化为字符串 let str = JSON.stringify(data); response.end(`handle($&#123;str&#125;)`) // response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;); &#125;) //用户名检测是否存在app.all(&#x27;/jquery-jsonp-server&#x27;, (request, response) =&gt; &#123; const data = &#123; name: &#x27;尚硅谷&#x27;, city: [&#x27;北京&#x27;, &#x27;上海&#x27;, &#x27;深圳&#x27;] &#125;; //将数据转化为字符串 let str = JSON.stringify(data); // 接受callback参数 let cb = request.query.callback; //返回结果 response.end(`$&#123;cb&#125;($&#123;str&#125;)`) // response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);&#125;)// 4.监听端口启动服务app.listen(8080, () =&gt; &#123; console.log(&quot;服务已经启动，8080端口监听中...&quot;);&#125;) 3 原生AJAX1-GET.html12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; #result &#123; width: 200px; height: 200px; border: solid 1px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;button&gt;点击发送请求&lt;/button&gt; &lt;div id=&quot;result&quot;&gt;&lt;/div&gt; &lt;script&gt; // 获取button元素 const btn = document.getElementsByTagName(&#x27;button&#x27;)[0]; const result = document.getElementById(&quot;result&quot;); //绑定事件 btn.onclick = function() &#123; //1.创建对象 const xhr = new XMLHttpRequest(); //2.初始化 设置请求方法和url xhr.open(&#x27;GET&#x27;, &#x27;http://127.0.0.1:8080/server?a=100&amp;b=200&amp;c=300&#x27;); // 3.发送 xhr.send(); // 4.事件绑定 处理服务端返回的结果 // on when 当...时候 // readystate 是 xhr对象中的属性，表示状态 // change 改变 xhr.onreadystatechange = function() &#123; //判断 if (xhr.readyState === 4) &#123; //判断响应状态码 200 404 403 401 500 //2xx 成功 if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) &#123; //处理结果 //1. 响应行 console.log(xhr.status); //状态码 console.log(xhr.statusText); //状态字符串 console.log(xhr.getAllResponseHeaders()); //所有响应头 console.log(xhr.response); //状态码 result.innerHTML = xhr.response; &#125; else &#123; &#125; &#125; &#125; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 2-POST.html123456789101112131415161718192021222324252627282930&lt;body&gt; &lt;div id=&quot;result&quot;&gt; &lt;/div&gt; &lt;script&gt; // 获取元素对象 const result = document.getElementById(&quot;result&quot;); //绑定事件 result.addEventListener(&quot;mouseover&quot;, function() &#123; //1.创建对象 const xhr = new XMLHttpRequest(); // 2.初始化 设置类型与URL xhr.open(&#x27;POST&#x27;, &#x27;http://127.0.0.1:8080/server&#x27;); // 设置请求头 xhr.setRequestHeader(&#x27;Content-Type&#x27;, &#x27;application/x-www-form-urlencoded&#x27;); xhr.setRequestHeader(&#x27;name&#x27;, &#x27;shangGuiGu&#x27;); // 3.发送 xhr.send(&#x27;a=100&amp;b=200&amp;c=300&#x27;); // 4.事件绑定 xhr.onreadystatechange = function() &#123; // 判断 if (xhr.readyState === 4) &#123; if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) &#123; // 处理服务端返回的结果 result.innerHTML = xhr.response; &#125; &#125; &#125; &#125;) &lt;/script&gt;&lt;/body&gt; 3-JSON.html12345678910111213141516171819202122232425262728293031323334&lt;body&gt; &lt;div id=&quot;result&quot;&gt; &lt;/div&gt; &lt;script&gt; const result = document.getElementById(&#x27;result&#x27;); //绑定键盘按下事件 window.onkeydown = function() &#123; //发送请求 const xhr = new XMLHttpRequest(); //设置响应体的类型 xhr.responseType = &#x27;json&#x27;; //初始化 xhr.open(&#x27;POST&#x27;, &#x27;http://127.0.0.1:8080/json-server&#x27;); //发送 xhr.send(); //事件绑定 xhr.onreadystatechange = function() &#123; if (xhr.readyState === 4) &#123; if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) &#123; // console.log(xhr.response); // result.innerHTML = xhr.response; //手动对数据转化 // let data = JSON.parse(xhr.response); // console.log(data); // result.innerHTML = data.name; // 自动转化 console.log(xhr.response.name); result.innerHTML = xhr.response.name; &#125; &#125; &#125; &#125; &lt;/script&gt;&lt;/body&gt; 4-IE缓存问题.html123456789101112131415161718192021&lt;body&gt; &lt;button&gt;点击发送请求&lt;/button&gt; &lt;div id=&quot;result&quot;&gt; &lt;/div&gt; &lt;script&gt; const btn = document.getElementsByTagName(&#x27;button&#x27;)[0]; const result = document.querySelector(&#x27;#result&#x27;); btn.addEventListener(&#x27;click&#x27;, function() &#123; const xhr = new XMLHttpRequest(); xhr.open(&quot;GET&quot;, &#x27;http://127.0.0.1:8080/ie?=&#x27; + Date.now());//*** xhr.send(); xhr.onreadystatechange = function() &#123; if (xhr.readyState === 4) &#123; if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) &#123; result.innerHTML = xhr.response; &#125; &#125; &#125; &#125;) &lt;/script&gt;&lt;/body&gt; 5-超时与网络异常.html123456789101112131415161718192021222324252627282930&lt;body&gt; &lt;button&gt;点击发送请求&lt;/button&gt; &lt;div id=&quot;result&quot;&gt;&lt;/div&gt; &lt;script&gt; const btn = document.getElementsByTagName(&#x27;button&#x27;)[0]; const result = document.querySelector(&#x27;#result&#x27;); btn.addEventListener(&#x27;click&#x27;, function() &#123; const xhr = new XMLHttpRequest(); // xhr.timeout = 2000; // xhr.ontimeout = function() &#123; // alert(&quot;网络异常，请稍后重试！！！！！&quot;) // &#125;; // xhr.onerror = function() &#123; // alert(&quot;断网了&quot;); // &#125; xhr.open(&quot;GET&quot;, &#x27;http://127.0.0.1:8080/delay&#x27;); xhr.send(); xhr.onreadystatechange = function() &#123; if (xhr.readyState === 4) &#123; if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) &#123; result.innerHTML = xhr.response; &#125; &#125; &#125; &#125;) &lt;/script&gt;&lt;/body&gt; 6-取消请求.html12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;body&gt; &lt;button&gt;点击发送请求&lt;/button&gt; &lt;button&gt;点击发送请求&lt;/button&gt; &lt;div id=&quot;result&quot;&gt;&lt;/div&gt; &lt;script&gt; const btns = document.getElementsByTagName(&#x27;button&#x27;); const result = document.querySelector(&#x27;#result&#x27;); let x = null; let isSending = false; btns[0].onclick = function() &#123; if (isSending) &#123; x.abort(); &#125; x = new XMLHttpRequest(); isSending = true; x.open(&quot;GET&quot;, &#x27;http://127.0.0.1:8080/delay&#x27;); x.send(); x.onreadystatechange = function() &#123; if (x.readyState === 4) &#123; isSending = false; &#125; &#125; &#125; btns[1].onclick = function() &#123; x.abort(); &#125; // btn.addEventListener(&#x27;click&#x27;, function() &#123; // const xhr = new XMLHttpRequest(); // xhr.open(&quot;GET&quot;, &#x27;http://127.0.0.1:8080/delay&#x27;); // xhr.send(); // xhr.onreadystatechange = function() &#123; // if (xhr.readyState === 4) &#123; // if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) &#123; // result.innerHTML = xhr.response; // &#125; // &#125; // &#125; // &#125;) &lt;/script&gt;&lt;/body&gt; 4-JQuery-AJAXclient.html1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;head&gt; &lt;!-- &lt;link crossorigin=&quot;anonymous&quot; href=&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.3/css/bootstrap-grid.css&quot; rel=&quot;stylesheet&quot;&gt; --&gt; &lt;link crossorigin=&quot;anonymous&quot; href=&quot;../CSS/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; &lt;script crossorigin=&quot;anonymous&quot; src=&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.3/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;h2 class=&quot;page-header&quot;&gt;jQuery发送AJAX请求&lt;/h2&gt; &lt;button class=&quot;bs primary&quot;&gt;GET&lt;/button&gt; &lt;button class=&quot;btn btn-danger&quot;&gt;POST&lt;/button&gt; &lt;button class=&quot;btn btn-info&quot;&gt;通用型方法ajax&lt;/button&gt; &lt;/div&gt; &lt;script&gt; $(&#x27;button&#x27;).eq(0).click(function() &#123; $.get(&#x27;http://127.0.0.1:8080/jquery-server&#x27;, &#123; a: 100, b: 200 &#125;, function(data) &#123; console.log(data); &#125;, &#x27;json&#x27;); &#125;) $(&#x27;button&#x27;).eq(1).click(function() &#123; $.post(&#x27;http://127.0.0.1:8080/jquery-server&#x27;, &#123; a: 100, b: 200 &#125;, function(data) &#123; console.log(data); &#125;); &#125;) $(&#x27;button&#x27;).eq(2).click(function() &#123; $.ajax(&#123; //url url: &#x27;http://127.0.0.1:8080/jquery-server&#x27;, //参数 data: &#123; a: 100, b: 200 &#125;, //请求类型 type: &#x27;GET&#x27;, //响应体结果 dataType: &#x27;json&#x27;, //成功的回调 success: function(data) &#123; console.log(data); &#125;, //超时时间 timeout: 2000, //失败的回调 error: function() &#123; console.log(&#x27;出错啦&#x27;) &#125;, Headers: &#123; c: 300, d: 400 &#125; &#125;) &#125;) &lt;/script&gt; &lt;script src=&quot;../JS/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;/body&gt; 5-Axios-AJAXaxios.html12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;head&gt; &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.2/axios.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;button&gt;GET&lt;/button&gt; &lt;button&gt;POST&lt;/button&gt; &lt;button&gt;AJAX&lt;/button&gt; &lt;script&gt; const btns = document.querySelectorAll(&#x27;button&#x27;); //配置baseURL axios.defaults.baseURL = &#x27;http://127.0.0.1:8080&#x27;; btns[0].onclick = function() &#123; axios.get(&#x27;/axios-server&#x27;, &#123; //url参数 params: &#123; id: 100, vip: 7, &#125;, //请求头信息 header: &#123; name: &#x27;atguigu&#x27;, age: 20 &#125; &#125;).then(value =&gt; &#123; console.log(value) &#125;) &#125; btns[1].onclick = function() &#123; axios.post(&#x27;/axios-server&#x27;, &#123; username: &#x27;admin&#x27;, password: &#x27;admin&#x27; &#125;, &#123; //url params: &#123; id: 200, vip: 9 &#125;, //请求头参数 headers: &#123; height: 200, weight: 200 &#125; &#125;); &#125; btns[2].onclick = function() &#123; axios(&#123; //请求方法 method: &#x27;POST&#x27;, //url url: &#x27;/axios-server&#x27;, //url参数 params: &#123; vip: 10, level: 30 &#125;, //头信息 headers: &#123; a: 100, b: 200 &#125;, //请求体参数 data: &#123; username: &#x27;admin&#x27;, password: &#x27;admin&#x27; &#125; &#125;).then(response =&gt; &#123; // console.log(response); //响应状态码 console.log(response.status); //响应状态字符串 console.log(response.statusText); //响应头信息 console.log(response.headers); //响应体 console.log(response.data); &#125;) &#125; &lt;/script&gt;&lt;/body&gt; 6-fetch-AJAXfetch.html1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;fetch 发送 AJAX 请求&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;button&gt;AJAX请求&lt;/button&gt;&lt;/body&gt;&lt;script&gt; const btn = document.querySelector(&#x27;button&#x27;); btn.onclick = function() &#123; fetch(&#x27;http://127.0.0.1:8080/fetch-server?vip=10&#x27;, &#123; //请求方法 method: &#x27;POST&#x27;, // 请求头 headers: &#123; name: &#x27;atguigu&#x27; &#125;, // 请求体 body: &#x27;username=admin&amp;password=admin&#x27; &#125;).then(response =&gt; &#123; // return response.text(); return response.json(); &#125;).then(response =&gt; &#123; console.log(response); &#125;) &#125;&lt;/script&gt;&lt;/html&gt; 7-跨域123456app.get(&#x27;/server&#x27;, (request, response) =&gt; &#123; //设置响应头 response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);//***** //设置响应体 response.send(&#x27;HELLO AJAX -2&#x27;);&#125;); bootcdn1BootCDN 是 极兔云 联合 Bootstrap 中文网 共同支持并维护的前端开源项目免费 CDN 服务，致力于为 Bootstrap、jQuery、React、Vue.js 一样优秀的前端开源项目提供稳定、快速的免费 CDN 加速服务。BootCDN 所收录的开源项目主要同步于 cdnjs 开源项目仓库","categories":[],"tags":[{"name":"ajax","slug":"ajax","permalink":"https://zhaoxin-wen.github.io/tags/ajax/"}]},{"title":"m3u8+idm下载加密视频","slug":"m3u8-idm下载加密视频","date":"2022-09-01T03:01:10.000Z","updated":"2022-09-17T14:54:12.712Z","comments":true,"path":"2022/09/01/m3u8-idm下载加密视频/","link":"","permalink":"https://zhaoxin-wen.github.io/2022/09/01/m3u8-idm%E4%B8%8B%E8%BD%BD%E5%8A%A0%E5%AF%86%E8%A7%86%E9%A2%91/","excerpt":"通过idm获取m3u8链接 粘贴链接到m3u8下载器。","text":"通过idm获取m3u8链接 粘贴链接到m3u8下载器。 例子：","categories":[{"name":"tools","slug":"tools","permalink":"https://zhaoxin-wen.github.io/categories/tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"https://zhaoxin-wen.github.io/tags/tools/"}]},{"title":"markdown语法","slug":"markdown语法","date":"2022-08-22T01:47:15.000Z","updated":"2022-09-17T14:37:17.026Z","comments":true,"path":"2022/08/22/markdown语法/","link":"","permalink":"https://zhaoxin-wen.github.io/2022/08/22/markdown%E8%AF%AD%E6%B3%95/","excerpt":"背景markdown是写博客的必备知识。以下markdown语法按照个人喜好程度排序。本文包括不同等级标题，字体，建立分号线，删除线，下划线，脚注，代码段，链接，图片，列表，区块，表格，转义。 1.使用‘#’号一级标题，以此类推，最多六级标题123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 2.字体123*斜体文本***粗体文本*****粗斜体文本*** 斜体文本粗体文本粗斜体文本","text":"背景markdown是写博客的必备知识。以下markdown语法按照个人喜好程度排序。本文包括不同等级标题，字体，建立分号线，删除线，下划线，脚注，代码段，链接，图片，列表，区块，表格，转义。 1.使用‘#’号一级标题，以此类推，最多六级标题123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 2.字体123*斜体文本***粗体文本*****粗斜体文本*** 斜体文本粗体文本粗斜体文本 3.三个以上的‘*’建立分割线1*** 4.如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可1~~你好~~ 你好 5. ‘&lt;u’标签实现下划线1&lt;u&gt;带下划线文本&lt;/u&gt; 带下划线文本 6.脚注12需要脚注的文本 [^脚注1]。[^脚注1]: 脚注的内容 7. 用&#96;可以把函数或片段包起来1`pirnt()`函数 print()函数 8. 用 &#96;&#96;&#96; 包裹一段代码123456789for(i=0; i&lt;n; i++)&#123; for(j=1; j&lt;n-i; j++)&#123; if(a[j-1] &gt; a[j])&#123; int temp;temp = a[j-1]; a[j-1] = a[j]; a[j]=temp; &#125; &#125;&#125; 9. 链接1这是我的博客 [zhaoxin-wen的博客](https://zhaoxin-wen.github.io/) 这是我的博客 zhaoxin-wen的博客 我们可以通过变量来设置一个链接，变量赋值在文档末尾进行： 1234这是我的博客[zhoaxin-wen][1]这是chilijmmm的博客[chilijmmm][2][1]: https://zhaoxin-wen.github.io/[2]: http://chilijmmm.top/ 这是我的博客zhoaxin-wen这是chilijmmm的博客chilijmmm 10.图片1234![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;)![我的头像](https://pic4.zhimg.com/80/v2-f77332502877c2f4575f3ac56c85ea9f_720w.jpg)![我的头像](https://pic4.zhimg.com/80/v2-f77332502877c2f4575f3ac56c85ea9f_720w.jpg &quot;HeadImg&quot;) Markdown 还没有办法指定图片的高度与宽度，推荐使用&lt;img&gt;标签。 1&lt;img src=&quot;https://pic4.zhimg.com/80/v2-f77332502877c2f4575f3ac56c85ea9f_720w.jpg&quot; width=&quot;30%&quot;&gt; 11. 单个*表示无序列表，1.(数字.)表示有序列表。^列表说明123456* 第一项* 第二项* 第三项1. 第一项2. 第二项3. 第三项 12.换行是使用两个以上空格加上回车。13. 区块。**&gt;** 符号 ，然后后面紧跟一个空格符号：123&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套 效果如下： 最外层 第一层嵌套 第二层嵌套 区块中可以使用列表，列表中也可以使用区块。 14.表格1略... 15.高级技巧支持的 HTML 元素不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。 目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 ，如： 1使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑 转义Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符： 12**文本加粗** \\*\\* 正常显示星号 \\*\\* 123456789101112\\ 反斜线` 反引号* 星号_ 下划线&#123;&#125; 花括号[] 方括号() 小括号# 井字号+ 加号- 减号. 英文句点! 感叹号 公式Markdown Preview Enhanced** 使用 KaTeX 或者 MathJax 来渲染数学表达式 [参考]：菜鸟教程","categories":[{"name":"markdown","slug":"markdown","permalink":"https://zhaoxin-wen.github.io/categories/markdown/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://zhaoxin-wen.github.io/tags/markdown/"}]},{"title":"hexo常用命令及操作","slug":"hexo常用命令及操作","date":"2022-08-22T01:40:35.000Z","updated":"2022-08-22T08:40:22.302Z","comments":true,"path":"2022/08/22/hexo常用命令及操作/","link":"","permalink":"https://zhaoxin-wen.github.io/2022/08/22/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E6%93%8D%E4%BD%9C/","excerpt":"","text":"hexo c hexo g hexo s hexo d 新建md文件，hexo n “文件名” ，例如 hexo n “markdown笔记” 创建页面，hexo n page 待创建页面名，例如 hexo n page categories。然后进入categories.md文件，在date行下面加入type: “categories”。 关闭评论区。在文件添加comments: false。 参考链接：Awt_FuDongLai的博客","categories":[{"name":"hexo","slug":"hexo","permalink":"https://zhaoxin-wen.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zhaoxin-wen.github.io/tags/hexo/"}]}],"categories":[{"name":"java","slug":"java","permalink":"https://zhaoxin-wen.github.io/categories/java/"},{"name":"tools","slug":"tools","permalink":"https://zhaoxin-wen.github.io/categories/tools/"},{"name":"markdown","slug":"markdown","permalink":"https://zhaoxin-wen.github.io/categories/markdown/"},{"name":"hexo","slug":"hexo","permalink":"https://zhaoxin-wen.github.io/categories/hexo/"}],"tags":[{"name":"反射","slug":"反射","permalink":"https://zhaoxin-wen.github.io/tags/%E5%8F%8D%E5%B0%84/"},{"name":"ajax","slug":"ajax","permalink":"https://zhaoxin-wen.github.io/tags/ajax/"},{"name":"tools","slug":"tools","permalink":"https://zhaoxin-wen.github.io/tags/tools/"},{"name":"markdown","slug":"markdown","permalink":"https://zhaoxin-wen.github.io/tags/markdown/"},{"name":"hexo","slug":"hexo","permalink":"https://zhaoxin-wen.github.io/tags/hexo/"}]}